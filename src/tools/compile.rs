use crate::bundle::run_bundle;
use anyhow::Result;
use std::convert::TryInto;
use std::fs;
use std::fs::File;
use std::io::BufReader;
use std::io::Read;
use std::io::Seek;
use std::io::SeekFrom;
use std::path::Path;

const SIGNATURE: &[u8; 8] = b"4tr31d1s";

pub fn run_compile(entry: &str, output: Option<String>, reload: bool) -> Result<()> {
    // Create a JavaScript bundle.
    let bundle = run_bundle(entry, reload, true)?;
    let bundle_size = bundle.as_bytes().len();

    let dune_exe_dir = dirs::home_dir().unwrap().join(".dune/bin/");

    let exe_name = "dune";
    let exe_extension = if cfg!(windows) { "exe" } else { "" };

    // Open dune's base binary.
    let mut f = File::open(dune_exe_dir.join(exe_name).with_extension(exe_extension))?;
    let mut buffer = Vec::new();

    // Read the whole binary file.
    f.read_to_end(&mut buffer)?;

    buffer.append(&mut bundle.as_bytes().to_vec());
    buffer.append(&mut bundle_size.to_be_bytes().to_vec());
    buffer.append(&mut SIGNATURE.to_vec());

    // Compute the output destination.
    let output = match output {
        Some(output) => Path::new(&output).with_extension(exe_extension),
        None => Path::new(".")
            .join(Path::new(entry).file_name().unwrap())
            .with_extension(exe_extension),
    };

    if let Some(parent) = &output.parent() {
        fs::create_dir_all(parent)?;
    }

    // Write standalone to destination output.
    fs::write(&output, buffer)?;

    // On Unix change standalone's permissions to 0o777.
    #[cfg(unix)]
    {
        use std::os::unix::fs::PermissionsExt;
        fs::set_permissions(&output, fs::Permissions::from_mode(0o777))?;
    }

    Ok(())
}

pub fn extract_standalone() -> Result<Option<String>> {
    // Get the current executable as bytes.
    let current_exe = std::env::current_exe()?;
    let file = File::open(current_exe)?;
    let mut file_reader = BufReader::new(file);

    let mut metadata = vec![0; 16];

    // Move cursor so we can read the embedded metadata.
    file_reader.seek(SeekFrom::End(-16))?;
    file_reader.read_exact(&mut metadata)?;

    let (bundle_size, tail) = metadata.as_slice().split_at(8);

    // Check if the current binary is a standalone generated by `dune compile`.
    if tail != SIGNATURE {
        return Ok(None);
    }

    // Cast `bundle_size` to a usize type.
    let bundle_size = usize::from_be_bytes(bundle_size.try_into().unwrap());
    let mut bundle = vec![0; bundle_size];

    // Move cursor and read the embedded JavaScript bundle.
    file_reader.seek(SeekFrom::End(-(16 + bundle_size as i64)))?;
    file_reader.read_exact(&mut bundle)?;

    Ok(Some(String::from_utf8(bundle).unwrap()))
}
